Overview
========

The main content of an esc file is the definitions of states and
transitions. Apart from that, there are a number of special
declarations (usually at the top of the file).


Indentation
===========

The esc syntax is based on using indentation to specify structure. The
indentation must be space characters (no tabs allowed), and they must
be a multiple of 4. This is enforced by the esc compiler in order to
ensure consistency in all the esc files in a project.


Comments
========

The '#' character is used for comments, everything on the remainder of
the line is considered part of the comment.

StateMachine Foo    # This is a comment


Special declarations
====================

HIncludes
---------

  HIncludes
      <include-file1.h>
      "include-file2.h"
      ...
      <include-fileN.h>

This will simply add #include statements in the beginning of the
.gen.h file. In this example it would be:

#include <include-file1.h>
#include "include-file2.h"
...
#include <include-fileN.h>


CppIncludes
-----------

Same as HIncludes, but the #include statements will be placed in the
top of the .gen.cpp file instead of the .gen.h file.


Events
------

The simplest way to define events is like this:

  Events
      evA
      evB(int x)
      evC(std::string y, std::auto_ptr<Imsi> z)

This will generate three class declarations (a bit simplified):

class evA {
public:
};

class evB {
public:
    evB(int x) : this->x(x) {}
    int x;
};

class evC {
public:
    evB(std::string y, std::auto_ptr<Imsi> z) : this->y(y), this->z(z) {}
    std::string y;
    std::auto_ptr<Imsi> z;
};

Comma characters are used to separate the event parameters. Each
parameter consists of first the type and then a space followed by the
name, just like a C++ declaration. 

If any parameter in an event has a type that contains a comma
characters, the event must be defined with each parameter on its own
line, like this:

  Events
      evD(
          std::pair<int, string> x,
          bool y;
      )

Event names shall start with 'ev' followed by any number of
alphanumerical characters.

Events can have default parameters, just like in C++. The default
parameter will be added to the event constructor.

  Events
      evE(string x, int y = 4)

The value of the default parameter (4 in this case) must be word that
does not contain any space characters.

It is also possible to specify that the destructor should contain a
'delete' statement, to free the memory pointed to by the
parameter. This is specified using this syntax:

  Events
      evF(<delete> pPtr)

In other words, the first part of the parameter string should be the
special keyword '<delete>'.

To send an event to the state machine, the sendEvent() method of the
esc::Sm base class is used. It takes one argument which is one of the
autogenerated event classes. E.g:

(somewhere in the manually edited C++ code)
    sendEvent(new evB(7));

The event object will be put on a queue and processed asynchronously
(i.e. when sendEvent() returns, the event has not been processed yet).


TriggeredOperations
-------------------

This works almost in the same way as the Events declaration. The only
difference is that instead of using sendEvent() to send the event to
the state machine, a method will be generated that can be called
directly. In this case the triggered operation will be executed
synchronously, and there is no queue like for the events.

  TriggeredOperations
      tgB(int x)

(somewhere in the manually edited C++ code)
    tgB(7);

The names of triggered operations shall start with 'tg' followed by
any number of alphanumerical characters.


EscIncludes
-----------

Events can be specified in a external esc file, which is included into
the esc file that contains the state machine. In this case the
external esc file must only contain event definitions, and no state
definitions. The events in the external file can be used just as if
they were defined in the same file.

  EscIncludes
      "path/to/esc1.esc"
      "path/to/esc2.esc"

The paths on each line are specified relative to the directory that
the esc file that contains the EscIncludes statement is placed in.


Namespace
---------

This is used to control which namespace the generated code will be placed in. For example:

  Namespace plants

This will put all the generated code within

  namespace plants {
      ...
  }

Another example:

  Namespace animals::insects

This will put all the generated code within

  namespace animals {
      namespace insects {
          ...
      }
  }


StateMachine
------------

The StateMachine keyword defines a state machine. It must be followed
by a name (on the same line). The states that belong to the state
machine are defined on the following lines, indented in one step. The
name will be used for the C++ class that the generated code belongs
to.

So for a state machine defined in SmTest.esc,

  StateMachine SmTest

will make generated methods like "SmTest::***".

  StateMachine SmTest::Sm

will make generated methods like "SmTest::Sm::***".


There can be multiple independent state machines in the same .esc
file.

  StateMachine SmTest::Alpha
      (states and transitions for state machine that will be part 
       of the inner class Alpha)

  StateMachine SmTest::Beta
      (states and transitions for state machine that will be part
       of the inner class Beta)


Defining states and transitions
===============================

States
------

States are defined by using a single word on a line, which specifies
the name of the state. For example:

  StateMachine
      Red
      Green
      Blue

This is a state machine with three states (and no transitions).

By using indentation, it is possible to specify that a state should be
a sub state within another state. For example:

  StateMachine
      Connected
          Transmitting
          Idle
      NotConnected

In this case Transmitting and Idle are sub states of the Connected
state, while NotConnected is not.

Orthogonal states is defined like this:

  StateMachine
      MainState
          RedConnected
          RedDisconnected
          ---
          GreenConnected
          GreenDisconnected

Here MainState contains two orthogonal regions, one that contains the
RedConnected and RedDisconnected sub states, and another that contains
the GreenConnected and GreenDisconnected sub states.

State names must be unique within a StateMachine or SubStateMachine
statement.

Transitions
-----------

The most simple transition specifies three things; a source state, a
trigger event name, and a destination state. A transition is specified
by a line that is placed indented inside the source state with this
pattern:

  (trigger event) -> (destination state)

(trigger event) is the name of the triggering event, and (destination
state) is the name of the destination state of the transition).
For example:

  Red
      evChangeColor -> Green
  Green
      evChangeColor -> Red

A transition can also have an action, which is a C++ code fragment
that is executed when performing the transition.

  Red
      evChangeColor -> Green / cout << "Going to green!" << endl;

The action is defined by using a '/' character, everything after that
until the end of line is considered to be part of the C++ code.

The C++ code must only contain one single C++ statement (ended with
a semicolon).

It is also possible to have multi-line actions. Then there is nothing
after the '/' character, and instead the next few lines that are
indented further are part of the action. For example:

  Red
      evChangeColor -> Green /
          cout << "Going to ";
          cout << "green" << endl;
  Green

As soon as a line with the same indentation as the transition (or
less) is encountered, it will not be considered part of the C++ code.

If the event has parameters, the special 'params' variable can be used
to refer to them.

Events
    evTest(int x)

  Alpha
      evTest -> Beta / cout << "x value is: " << params->x << endl;
  Beta

The trigger in a transition can have a guard as well as an event
name. This is specified with C++ code that is surrounded by '[' and
']' characters. Currently it is not allowed to have a ']' character
inside the C++ code, and multi-line guards are not supported.

  Red
      evChangeColor[isReady() == true] -> Green

When the evChangeColor event is processed, this transition will only
be taken if "isReady() == true" evaluates to true. The guard can also
refer to the event parameters through the 'params' variable, if
needed.

Transitions does not need to have a triggering event.

  Red
      -> Green

This will cause the state machine to enter the Green state, as soon as
the Red state is entered.

Transitions without triggering events can still have guards.

  Red
      [canGoToGreen()] -> Green
      [canGoToBlue()] -> Blue
      [else] -> Yellow

The special [else] syntax means the same as not having any guard at
all.

Only one guard should evaluate to true at the same time, otherwise the
behaviour is undefined. So therefore it does not matter in which order
they are declared in the esc file.


Entry/exit functions
--------------------

The keywords entry and exit are used to define entry and
exit actions. For example:

  Red
      entry / cout << "Entering Red" << endl;
  Green
      exit / cout << "Exiting Green" << endl;

The syntax for the action is the same as for transition actions.


Default transitions
-------------------

By default, the first state in the file will have a default transition
to it. For example:

  NotConnected
  Connected
      Sending
      Idle

In this case, there is a default transition that goes to NotConnected,
and inside Connected, there is a default transition that goes to Sending.

This can be changed by using the default keyword. This is also
needed if the default transition should have any action.

  default -> Connected
  NotConnected
  Connected
      default -> Idle / cout << "Going to idle" << endl;
      Sending
      Idle

The syntax is the same as for any other transition, but 'default' is
used as the trigger instead of an event name.

For clarity it is recommended that any default transition is the first
one in a state, but this is not enforced.


Internal transitions
--------------------

An event can trigger an internal transition, which means that the
state machine will stay in the same state. It is similar to an
explicit transition to the same state, but will not leave and reenter
the state (so i.e. entry/exit functions will not be executed).

  Red
      entry / onEnter();
      internal evX / someAction();
      evY -> Red / someAction();

When evX is received, someAction() will be executed. When evY is
received, someAction() and then onEnter() will be executed. In both
cases the state machine will end up in state Red.


History states
--------------

A transition statement can use the history keyword before the
destination state name. This means that the transition is going to an
implicitly defined history state inside the destination state
(i.e. the sub states will be the same as they were last time the
destination state was active).

  Red
      evGoToGreen -> history Green
  Green
      Green1
      Green2

When going to green, either Green1 or Green2 will be the active sub
state, depending on which one was active the last time the state
machine was in the Green state.


Junction points
---------------

The junction keyword is used to define a junction point.

  Red
      evChange -> J1
  Green
      evChange -> J1
  junction J1
      -> Yellow

Junction points may have several incoming transitions, and several
outgoing transitions (all except one of the outgoing transitions must
have guards). The outgoing transitions must not have any triggering
events.

When taking a transition sequence that consists of a number of
transitions with only junction points (and not choice points or
states) inbetween, all guards on outgoing transitions will be
evaluated before deciding to take the transition sequence. If there is
not a path where all of them evaluates to true, the transition
sequence will not be taken at all.  After the guards are evaluated and
the transition path decided, all actions along the path will be
executed.


Choice points
-------------

The choice keyword is used to define a choice point. These must have
at least two outgoing transitions, and the transitions may not have
any triggering events. For example:

  Red
     evChange -> DecideColor
  choice DecideColor
      [canGoToGreen()] -> Green
      [canGoToBlue()] -> Blue
      [else] -> Yellow

When taking a transition that leads to a choice point, the transition
will be taken and the transition action (as well as any entry/action
actions of containing states) will be executed before reaching the
choice point and evaluating the guards of the outgoing transitions.


Termination state
-----------------

The terminate keyword is used to specify that a state is a termination
state. 
  Red
      evShutDown -> TheTerminateState
  terminate TheTerminateState

A termination state must not have any outgoing transitions or child
states.

The terminate keyword can also be used to define an inline termination
state (see Inline states).


Timers
------

The trigger event for a transition may be a timer. This is specified
by the syntax "tm[x]" where x is any C++ code that evaluates to an
integer that is interpreted as the number of milliseconds that the
timer should be set to wait, counting from when entering the source
state of the transition.

  Red
      tm[1000] -> Green
  Green
      entry / cout << "1 second has passed\n";


Join bars
---------

The join keyword is used to define a join bar. Each transition that
goes to a join bar must come from a region of the same state. There
must be exactly one outgoing transition without any triggering event
or guard.

  Colors
      Blue
      Yellow
          evX -> Join1
      ---
      Red
      Green
          evY -> Join1
  join Join1
      -> terminate


Sub state machines
------------------

A state can contain a sub state machine. The sub state machine is
defined separately, and in order to connect it to the outer state
machine, exit connectors and entry connectors can be used.

StateMachine
    Outer
        NormalState
            evGoToSubSm -> SubSm
            evGoToEnter -> SubSm.Entry1
        SubSm
            subentry Entry1
            subexit Exit1
                -> NormalState

SubStateMachine SubSm
    subentry Entry1
        -> Inner1
    subexit Exit1
    Inner1
    Inner2
        evXYZ -> Exit1

The syntax for SubStateMachine is the same as StateMachine. The name
of the SubStateMachine must be the same as exactly one state in
another StateMachine or SubStateMachine.

Enter and exit connectors are defined by using the subentry and
subexit keywords, respectively. In the outer state machine, the state
must not have any other sub states, but only the enter and exit
connectors. In the sub state machine, the enter and exit connectors
must be defined in the beginning, before anything else. The names and
number of enter and exit connectors must be the same in the outer
state machine and the sub state machine.

In the outer state machine, enter connectors must not have any
outgoing transitions, and exit connectors must have a single outgoing
transition without any trigger event or guard. In the inner state
machine, it is vice versa, exit connectors have not outgoing
transitions, and enter connectors must have a single one without any
trigger event or guard.

A transition may go directly to the state that contains the sub state
machine, or it can go to one of its entry connectors. In the latter
case the syntax <SubSmName>.<EntryConnectorName> is used. If the
transition goes directly to the state, the sub state machine's default
transition will be used when entering it.


Diagram connectors
------------------

Diagram connectors can be used to make large diagrams more
manageable. A simple example:

  Connecting
      evOnFailure -> Abort
  Transmitting
      evOnError -> Abort
  connector Abort
      -> HandleAbort
  HandleAbort

Abort will be represented as two entities in the diagram. One
source connector that is the destination for the evOnFailure and
evOnError transitions, and one destination connector that is the
source for the transition that goes to the HandleAbort state. There
will not be any explicit arrow going from the source to the
destination, this is implicit by the sharing of the same name.

They don't make much sense when only considering the text format, but
in a graphical diagram it can be useful to avoid many long transition
arrows between different places in a large diagram.

The above example is semantically equivalant with this:

  Connecting
      evOnFailure -> HandleAbort
  Transmitting
      evOnError -> HandleAbort
  HandleAbort

The source and destination connector does not need to be in the same
sub state machine, so they can be used as a way of exiting the current
sub state machine and go to another one. In case the destination
connector is in another sub state machine, its name must be qualified
with the sub state machine name, in the same way as for an entry
connector (i.e. <SubSmName>.<DiagramConnectorName>).

Ordinarily, the diagram will contain one source diagram connector with
incoming arrows from all transitions with e.g. Abort as the
destination. By using an optional number after the destination state
name in a transition, e.g. Abort(2) or Abort(3), several source
diagram connectors will be displayed in the diagram (one for each
number). This is also just a way of avoiding having very long
transition arrows in large diagrams.


Inline states
-------------

In some cases, states and condition connectors only have a single
incoming transition. In those cases it is not necessary to name it,
instead the state or condition connector can be defined inline in the
transition.

Consider this example:

  Red
      evX -> C1 / someAction();
  choice C1
      [guard1()] -> Blue
      [else] -> Green

The C1 condition connector can be inlined like this:

  Red
      evX -> choice / someAction();
          [guard1()] -> Blue
          [else] -> Green

This works with states, with the keyword 'state', choice points, with
the keyword 'choice', and termination states with the keyword
'terminate'.

If the action is multiple lines, this syntax is used:

  Red
      evX -> choice /
              actionLine(1);
              actionLine(2);
          [guard1()] -> Blue
          [else] -> Green

In other words, if nothing comes after the / character, then the
action code is indented two steps, and the guard transitions are
indented one step, compared to the original transition.
