Integration of esc code and c++ code
------------------------------------

The C++ code that is generated by escgen.py is meant to be part of a
C++ class. This class will contain some code that are not directly
related to the state machine logic (i.e. a constructor), and this will
be created manually, as in any other class (typically in a .h file and
a .cpp file). It will also contain some code (member functions and
member variables) that implements the state machine logic, and this
code will be generated by escgen.py.

For a class Foo the following files are used:

Manually edited
  Foo.h - class declaration (no state machine logic)
  Foo.cpp - class member function definitions (no state machine logic)
  Foo.esc - all state machine logic

Generated at build time, from the .esc file
  Foo.gen.h   - state machine logic data type and method declarations
  Foo.gen.cpp - state machine logic member functions

In order to connect the h/cpp files with the gen.h/gen.cpp files, the
following needs to be done:

In Foo.h: 
*  Foo.gen.h must be included 
*  The include file <Esc.h> must be included (from libesc)
*  The class Foo must inherit from the base class esc::Sm 
*  The class must include the following in its declaration (which comes 
   from Foo.gen.h):

       FooSmData smData_;
       FOO_SM_FUNCTION_DECLARATIONS;

   This is the same pattern for all esc state machines.

In Foo.cpp: 
*  In order to send an event to the state machine, the sendEvent() 
   method is used. It is inherited from the esc::Sm base class. This 
   method takes as its argument an event object that was allocated with 
   the 'new' operator (it will be deallocated by the framework).

       sendEvent(new evTurnOn());

   In the Foo.gen.h file there will be a C++ class definition for
   each event. 

* The Foo.gen.cpp file and the libesc library must be added when
linking the Foo.cpp file, i.e:

     g++ SmOnOff.cpp SmOnOff.gen.cpp libesc.a -o SmOnOff.elf

The sendEvent() function will put the event object on a queue where it
will be executed by the IOReactor.
